{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport authContext from './authContext';\nimport authReducer from './authReducer';\nimport { REGISTRO_EXITOSO, REGISTRO_ERROR, OCULTAR_ALERTA, LOGIN_EXITOSO, LOGIN_ERROR, USUARIO_AUTENTICADO, CERRAR_SESION } from '../../types';\nimport clienteAxios from '../../config/axios';\nimport tokenAuth from '../../config/tokenAuth';\n\nvar AuthState = function AuthState(_ref) {\n  var children = _ref.children;\n  // Definir un state inicial\n  var initialState = {\n    token: true ? localStorage.getItem('token') : '',\n    autenticado: null,\n    usuario: null,\n    mensaje: null,\n    cargando: null\n  }; // Definir el reducer\n\n  var _useReducer = useReducer(authReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1]; // Registrar nuevos usuarios\n\n\n  var registrarUsuario = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(datos) {\n      var respuesta;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return clienteAxios.post('/api/usuarios', datos);\n\n            case 3:\n              respuesta = _context.sent;\n              dispatch({\n                type: REGISTRO_EXITOSO,\n                payload: respuesta.data.msg\n              });\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              dispatch({\n                type: REGISTRO_ERROR,\n                payload: _context.t0.response.data.msg\n              });\n\n            case 10:\n              // Limpia la alerta después de 3 segundos\n              setTimeout(function () {\n                dispatch({\n                  type: OCULTAR_ALERTA\n                });\n              }, 3000);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function registrarUsuario(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Autenticar Usuarios\n\n\n  var iniciarSesion = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(datos) {\n      var respuesta;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return clienteAxios.post('/api/auth', datos);\n\n            case 3:\n              respuesta = _context2.sent;\n              dispatch({\n                type: LOGIN_EXITOSO,\n                payload: respuesta.data.token\n              });\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              dispatch({\n                type: LOGIN_ERROR,\n                payload: _context2.t0.response.data.msg\n              });\n\n            case 10:\n              // Limpia la alerta después de 3 segundos\n              setTimeout(function () {\n                dispatch({\n                  type: OCULTAR_ALERTA\n                });\n              }, 3000);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    return function iniciarSesion(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // Retorne el Usuario autenticado en base al JWT\n\n\n  var usuarioAutenticado = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var token, respuesta;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              token = localStorage.getItem('token');\n\n              if (token) {\n                tokenAuth(token);\n              }\n\n              _context3.prev = 2;\n              _context3.next = 5;\n              return clienteAxios.get('/api/auth');\n\n            case 5:\n              respuesta = _context3.sent;\n\n              if (respuesta.data.usuario) {\n                dispatch({\n                  type: USUARIO_AUTENTICADO,\n                  payload: respuesta.data.usuario\n                });\n              }\n\n              _context3.next = 12;\n              break;\n\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](2);\n              //console.log(error);\n              dispatch({\n                type: LOGIN_ERROR,\n                payload: _context3.t0.response.data.msg\n              });\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 9]]);\n    }));\n\n    return function usuarioAutenticado() {\n      return _ref4.apply(this, arguments);\n    };\n  }(); // Cerrar la sesión\n\n\n  var cerrarSesion = function cerrarSesion() {\n    dispatch({\n      type: CERRAR_SESION\n    });\n  };\n\n  return __jsx(authContext.Provider, {\n    value: {\n      token: state.token,\n      autenticado: state.autenticado,\n      usuario: state.usuario,\n      mensaje: state.mensaje,\n      cargando: state.cargando,\n      registrarUsuario: registrarUsuario,\n      iniciarSesion: iniciarSesion,\n      usuarioAutenticado: usuarioAutenticado,\n      cerrarSesion: cerrarSesion\n    }\n  }, children);\n};\n\nexport default AuthState;","map":null,"metadata":{},"sourceType":"module"}