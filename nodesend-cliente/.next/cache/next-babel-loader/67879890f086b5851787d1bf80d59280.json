{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport authContext from './authContext';\nimport authReducer from './authReducer';\nimport { REGISTRO_EXITOSO, REGISTRO_ERROR, OCULTAR_ALERTA, LOGIN_EXITOSO, LOGIN_ERROR, USUARIO_AUTENTICADO, CERRAR_SESION } from '../../types';\nimport clienteAxios from '../../config/axios';\nimport tokenAuth from '../../config/tokenAuth';\n\nconst AuthState = ({\n  children\n}) => {\n  // Definir un state inicial\n  const initialState = {\n    token: false ? localStorage.getItem('token') : '',\n    autenticado: null,\n    usuario: null,\n    mensaje: null,\n    cargando: null\n  }; // Definir el reducer\n\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(authReducer, initialState); // Registrar nuevos usuarios\n\n  const registrarUsuario = async datos => {\n    try {\n      const respuesta = await clienteAxios.post('/api/usuarios', datos);\n      dispatch({\n        type: REGISTRO_EXITOSO,\n        payload: respuesta.data.msg\n      });\n    } catch (error) {\n      dispatch({\n        type: REGISTRO_ERROR,\n        payload: error.response.data.msg\n      });\n    } // Limpia la alerta después de 3 segundos\n\n\n    setTimeout(() => {\n      dispatch({\n        type: OCULTAR_ALERTA\n      });\n    }, 3000);\n  }; // Autenticar Usuarios\n\n\n  const iniciarSesion = async datos => {\n    try {\n      const respuesta = await clienteAxios.post('/api/auth', datos);\n      dispatch({\n        type: LOGIN_EXITOSO,\n        payload: respuesta.data.token\n      });\n    } catch (error) {\n      dispatch({\n        type: LOGIN_ERROR,\n        payload: error.response.data.msg\n      });\n    } // Limpia la alerta después de 3 segundos\n\n\n    setTimeout(() => {\n      dispatch({\n        type: OCULTAR_ALERTA\n      });\n    }, 3000);\n  }; // Retorne el Usuario autenticado en base al JWT\n\n\n  const usuarioAutenticado = async () => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      tokenAuth(token);\n    }\n\n    try {\n      const respuesta = await clienteAxios.get('/api/auth');\n\n      if (respuesta.data.usuario) {\n        dispatch({\n          type: USUARIO_AUTENTICADO,\n          payload: respuesta.data.usuario\n        });\n      }\n    } catch (error) {\n      //console.log(error);\n      dispatch({\n        type: LOGIN_ERROR,\n        payload: error.response.data.msg\n      });\n    }\n  }; // Cerrar la sesión\n\n\n  const cerrarSesion = () => {\n    dispatch({\n      type: CERRAR_SESION\n    });\n  };\n\n  return __jsx(authContext.Provider, {\n    value: {\n      token: state.token,\n      autenticado: state.autenticado,\n      usuario: state.usuario,\n      mensaje: state.mensaje,\n      cargando: state.cargando,\n      registrarUsuario,\n      iniciarSesion,\n      usuarioAutenticado,\n      cerrarSesion\n    }\n  }, children);\n};\n\nexport default AuthState;","map":null,"metadata":{},"sourceType":"module"}