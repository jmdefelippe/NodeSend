{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useReducer } from 'react';\nimport appContext from './appContext';\nimport appReducer from './appReducer';\nimport { MOSTRAR_ALERTA, OCULTAR_ALERTA, SUBIR_ARCHIVO, SUBIR_ARCHIVO_EXITO, SUBIR_ARCHIVO_ERROR, CREAR_ENLACE_EXITO, CREAR_ENLACE_ERROR, LIMPIAR_STATE, AGREGAR_PASSWORD, AGREGAR_DESCARGAS } from '../../types';\nimport clienteAxios from '../../config/axios';\n\nconst AppState = ({\n  children\n}) => {\n  const initialState = {\n    mensaje_archivo: null,\n    nombre: '',\n    nombre_original: '',\n    cargando: null,\n    descargas: 1,\n    password: '',\n    autor: null,\n    url: ''\n  }; // Crear dispatch y state\n\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(appReducer, initialState); // Muestra una alerta \n\n  const mostrarAlerta = msg => {\n    dispatch({\n      type: MOSTRAR_ALERTA,\n      payload: msg\n    });\n    setTimeout(() => {\n      dispatch({\n        type: OCULTAR_ALERTA\n      });\n    }, 3000);\n  }; // Sube los archivos al servidor\n\n\n  const subirArchivo = async (formData, nombreArchivo) => {\n    dispatch({\n      type: SUBIR_ARCHIVO\n    });\n\n    try {\n      const resultado = await clienteAxios.post('/api/archivos', formData);\n      console.log(resultado.data);\n      dispatch({\n        type: SUBIR_ARCHIVO_EXITO,\n        payload: {\n          nombre: resultado.data.archivo,\n          nombre_original: nombreArchivo\n        }\n      });\n    } catch (error) {\n      // console.log(error);\n      dispatch({\n        type: SUBIR_ARCHIVO_ERROR,\n        payload: error.response.data.msg\n      });\n    }\n  }; // crea un enlace una vez que se subió el archivo\n\n\n  const crearEnlace = async () => {\n    const data = {\n      nombre: state.nombre,\n      nombre_original: state.nombre_original,\n      descargas: state.descargas,\n      password: state.password,\n      autor: state.autor\n    }; // console.log(data);\n\n    try {\n      const resultado = await clienteAxios.post('/api/enlaces', data);\n      dispatch({\n        type: CREAR_ENLACE_EXITO,\n        payload: resultado.data.msg\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const limpiarState = () => {\n    dispatch({\n      type: LIMPIAR_STATE\n    });\n  }; // Agregue el password\n\n\n  const agregarPassword = password => {\n    dispatch({\n      type: AGREGAR_PASSWORD,\n      payload: password\n    });\n  }; // agrega un número de descargas\n\n\n  const agregarDescargas = descargas => {\n    dispatch({\n      type: AGREGAR_DESCARGAS,\n      payload: descargas\n    });\n  };\n\n  return __jsx(appContext.Provider, {\n    value: {\n      mensaje_archivo: state.mensaje_archivo,\n      nombre: state.nombre,\n      nombre_original: state.nombre_original,\n      cargando: state.cargando,\n      descargas: state.descargas,\n      password: state.password,\n      autor: state.autor,\n      url: state.url,\n      mostrarAlerta,\n      subirArchivo,\n      crearEnlace,\n      limpiarState,\n      agregarPassword,\n      agregarDescargas\n    }\n  }, children);\n};\n\nexport default AppState;","map":null,"metadata":{},"sourceType":"module"}